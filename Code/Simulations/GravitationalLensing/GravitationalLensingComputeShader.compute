#pragma kernel CSMain


#define PHYSICS_AU 149597870700.0f        // m
#define PHYSICS_C 299792458.0f            // m/s
#define PHYSICS_G 6.67430E-11             // m^3 * kg^-1 * s^-2      

#define SIMULATION_WIDTH 1920.0f
#define SIMULATION_HEIGHT 880.0f
#define SIMULATION_HALFWIDTH 960.0f
#define SIMULATION_HALFHEIGHT 440.0f
#define SIMULATION_DELTATIME 0.01f
#define SIMULATION_MAXPHOTONSTEPS 2000

#define SIMULATION_COUNT_BLACKHOLES 1

#define FLT_MAX 3.402823466e+38F
#define FLT_MIN 1.175494E-38f


// Structs
struct Blackhole
{
    float3 Position;
    float Mass;
    float SchwarschildRadius;
};

struct CelestialObject
{
    float3 Position;
    float Radius;
};

struct Photon
{
    float3 Position;
    float3 Velocity;
    float RedshiftFactor;
    float BlueshiftFactor;
    float4 Color;
};

struct Camera
{
    float Fov;
    float2 ScreenSize;
    float2 ViewportSize;
    float AspectRatio;
};

// Values
// -- Textures
RWTexture2D<float4> TargetTexture;
RWTexture2D<float4> SkyboxTexture;
RWTexture2D<float4> CelestialObjectTexture;

// -- Simulation
RWStructuredBuffer<Camera> SimulationCamera;
RWStructuredBuffer<CelestialObject> SimulationCelestialObject;
RWStructuredBuffer<Blackhole> SimulationBlackholes;


// Helper functions
// -- Conditionals
float when_eq(float a, float b)
{
    return 1.0f - abs(sign(a - b));
}

float when_lt(float a, float b)
{
    return max(sign(b - a), 0.0f);
}

float when_gt(float a, float b)
{
    return max(sign(a - b), 0.0f);
}


bool is_lt(float a, float b)
{
    return when_lt(a, b) == 1.0f;
}

bool is_gt(float a, float b)
{
    return when_gt(a, b) == 1.0f;
}


// -- Color and light
float3 RGBA2HSV(float4 RGBA)
{
    // Note: Basert paa arbeidet til Sam Hocevar og Emil Persson (https://www.chilliant.com/rgb2hsv.html)
    float4 P = (RGBA.g < RGBA.b) ? float4(RGBA.bg, -1.0f, 2.0f / 3.0f) : float4(RGBA.gb, 0.0f, -1.0f / 3.0f);
    float4 Q = (RGBA.r < P.x) ? float4(P.xyw, RGBA.r) : float4(RGBA.r, P.yzx);
    float C = Q.x - min(Q.w, Q.y);
    float H = abs((Q.w - Q.y) / (6.0f * C + 1E-10F) + Q.z);
    float S = C / (Q.x + 1E-10F); // HSV = float3(H, C, Q.x);
    
    H -= H * when_gt(H, 0.9999f);
    
    return float3(H, S, Q.x);
}


float Hue2Wavelength(float hue)
{
    // Note: Basert paa https://stackoverflow.com/questions/11850105/hue-to-wavelength-mapping  
    return 650.0f - 250.0f * hue / 0.75f;
}


float4 HSV2RGBA(float3 hsv)
{
    float3 rgb = ((saturate(float3(abs(hsv.x * 6.0f - 3.0f) - 1.0f, 2.0f - abs(hsv.x * 6.0f - 2.0f), 2.0f - abs(hsv.x * 6.0f - 4.0f))) - 1) * hsv.y + 1) * hsv.z;
    
    return float4(rgb.x, rgb.y, rgb.z, 1.0f);
}


float4 Wavelength2RGBA(float wavelength, float4 originalColor)
{
    float Gamma = 0.80f, factor, red, green, blue;
    
    wavelength = clamp(wavelength, 380.0f, 781.0f);
    
    if ((wavelength >= 380.0f) && (wavelength < 440.0f))
    {
        red = -(wavelength - 440.0f) / (440.0f - 380.0f);
        green = 0.0f;
        blue = 1.0f;
    }
    else if ((wavelength >= 440.0f) && (wavelength < 490.0f))
    {
        red = 0.0f;
        green = (wavelength - 440.0f) / (490.0f - 440.0f);
        blue = 1.0f;
    }
    else if ((wavelength >= 490.0f) && (wavelength < 510.0f))
    {
        red = 0.0f;
        green = 1.0f;
        blue = -(wavelength - 510.0f) / (510.0f - 490.0f);
    }
    else if ((wavelength >= 510.0f) && (wavelength < 580.0f))
    {
        red = (wavelength - 510.0f) / (580.0f - 510.0f);
        green = 1.0f;
        blue = 0.0f;
    }
    else if ((wavelength >= 580.0f) && (wavelength < 645.0f))
    {
        red = 1.0f;
        green = -(wavelength - 645.0f) / (645.0f - 580.0f);
        blue = 0.0f;
    }
    else if ((wavelength >= 645.0f) && (wavelength < 781.0f))
    {
        red = 1.0f;
        green = 0.0f;
        blue = 0.0f;
    }
    
    // Let the intensity fall off near the vision limits
    if ((wavelength >= 380.0f) && (wavelength < 420.0f))
    {
        factor = 0.3f + 0.7f * (wavelength - 380.0f) / (420.0f - 380.0f);
    }
    else if ((wavelength >= 420.0f) && (wavelength < 701.0f))
    {
        factor = 1.0f;
    }
    else if ((wavelength >= 701.0f) && (wavelength <= 781.0f))
    {
        factor = 0.3f + 0.7f * (780.0f - wavelength) / (780.0f - 700.0f);
    }
    
    float3 originalColorHSV = RGBA2HSV(originalColor);
    float3 wavelengthColorHSV = RGBA2HSV(float4(pow(red * factor, Gamma), pow(green * factor, Gamma), pow(blue * factor, Gamma), 1.0f));
    float3 wavelengthColorCorrected = HSV2RGBA(float3(wavelengthColorHSV.x, originalColorHSV.y, originalColorHSV.z)).xyz;
    
    return float4(wavelengthColorCorrected.x, wavelengthColorCorrected.y, wavelengthColorCorrected.z, originalColor.w);
}


// -- IntersectableTexture
float4 GetIntersectableTexturePixelColor(RWTexture2D<float4> texture2d, float3 textureCenter, float2 textureSize, float3 intersectionPoint)
{
    float textureResolutionX, textureResolutionY;
    
    texture2d.GetDimensions(textureResolutionX, textureResolutionY);
    
    float3 textureProjectedCoordinates = intersectionPoint - textureCenter;
    float2 textureCoordinates = float2(textureResolutionX * (0.5f + textureProjectedCoordinates.x / textureSize.x), textureResolutionY * (0.5f + textureProjectedCoordinates.y / textureSize.y));
    
    return texture2d[textureCoordinates];
}


// -- Physics
float3 GravitationalAcceleration(float3 positionA, float3 positionB, float massB)
{
    float3 deviation = positionB - positionA;
    float deviationMagnitude = length(deviation);

    return normalize(deviation) * PHYSICS_G * massB / (deviationMagnitude * deviationMagnitude);
}


float GravitationalEscapeVelocity(float3 positionA, float3 positionB, float massB)
{
    return sqrt(2.0f * PHYSICS_G * massB / length(positionB - positionA));
}


float LorentzFactor(float velocity)
{
    return 1.0f / sqrt(1.0f - (velocity * velocity) / (PHYSICS_C * PHYSICS_C));
}


float GravitationalPotential(float3 positionA, float3 positionB, float massB)  // Source: https://en.wikipedia.org/wiki/Gravitational_potential
{
    return -(PHYSICS_G * massB) / length(positionB - positionA);

}


float GetPlaneIntersectionCoefficient(float3 pos, float3 direction, float3 center, float3 normal)  // Source: https://en.wikipedia.org/wiki/Line%E2%80%93plane_intersection 
{
    return dot(center - pos, normal) / dot(direction, normal);
}


float IsPlaneIntersectionAhead(float3 pos, float3 direction, float3 center, float3 normal)
{
    return GetPlaneIntersectionCoefficient(pos, direction, center, normal) > 0.0f;
}


float3 GetPlaneIntersectionPoint(float3 pos, float3 direction, float3 center, float3 normal)
{
    return pos + direction * GetPlaneIntersectionCoefficient(pos, direction, center, normal);
}


float3 GetSphereTimestepIntersectionPoint(float3 pos, float3 velocity, float3 center, float radius)
{
    return pos + normalize(velocity) * sqrt(pow(length(center - pos), 2.0f) - pow(length(cross(center - pos, velocity)) / length(velocity), 2.0f));
}


bool GetSphereTimestepIntersection(float3 pos, float3 velocity, float3 center, float radius)
{
    float intersectionCenterDistance = length(cross(center - pos, velocity)) / length(velocity);
    
    if (intersectionCenterDistance > radius) return false;
    
    float3 intersectionPoint = pos + normalize(velocity) * sqrt(pow(length(center - pos), 2.0f) - intersectionCenterDistance * intersectionCenterDistance);
    
    return dot(intersectionPoint - pos, intersectionPoint - (pos + velocity)) < 0.0f;  // Note: The intersection point has to be between pos and pos + velocity
}


// Struct functions
// -- Black holes
bool BlackholeCheckCollision(Blackhole blackhole, Photon photon)
{
    return GetSphereTimestepIntersection(photon.Position, photon.Velocity * SIMULATION_DELTATIME, blackhole.Position, blackhole.SchwarschildRadius);
}


// -- CelestialObject
bool CelestialObjectCheckCollision(Photon photon)
{
    return GetSphereTimestepIntersection(photon.Position, photon.Velocity * SIMULATION_DELTATIME, SimulationCelestialObject[0].Position, SimulationCelestialObject[0].Radius);
}


float4 CelestialObjectGetIntersectionColor(Photon photon)
{
    float textureDimensionX, textureDimensionY;
    
    CelestialObjectTexture.GetDimensions(textureDimensionX, textureDimensionY);
    
    float3 intersectionPoint = GetSphereTimestepIntersectionPoint(photon.Position, photon.Velocity * SIMULATION_DELTATIME, SimulationCelestialObject[0].Position, SimulationCelestialObject[0].Radius);
    float2 textureHalvedDimensions = float2(textureDimensionX * 0.5f, textureDimensionY * 0.5f);
    float2 texturePixelIntersectionPoint = (intersectionPoint - SimulationCelestialObject[0].Position).xy / SimulationCelestialObject[0].Radius * textureHalvedDimensions + textureHalvedDimensions;
    
    return CelestialObjectTexture[uint2((uint) texturePixelIntersectionPoint.x, (uint) texturePixelIntersectionPoint.y)];
}


// -- Photon
Photon CreatePhoton(float3 position, float3 velocity)
{
    Photon photon;
    photon.Position = position;
    photon.Velocity = velocity;
    photon.RedshiftFactor = 0.0f;
    photon.BlueshiftFactor = 1.0f;
    photon.Color = float4(0.0f, 0.0f, 0.0f, 0.0f);
    
    return photon;
}


float3 PhotonCalculateAcceleration(Photon photon)
{
    float3 sumOfAcceleration = float3(0.0f, 0.0f, 0.0f);
    int i;
    
    // Calculation: Calculate gravitational acceleration for every blackhole instance
    // -- Blackholes
    [unroll] 
    for (i = 0; i < SIMULATION_COUNT_BLACKHOLES; i++)
        sumOfAcceleration += GravitationalAcceleration(photon.Position, SimulationBlackholes[i].Position, SimulationBlackholes[i].Mass);
        
    return sumOfAcceleration;
}


void PhotonUpdateShift(inout Photon photon)
{
    float sumOfGravitationalPotential = 0.0f;
    float sumOfCameraGravitationalPotential = 0.0f;
    
    [unroll]
    for (int i = 0; i < SIMULATION_COUNT_BLACKHOLES; i++)
    {
        sumOfGravitationalPotential += GravitationalPotential(photon.Position, SimulationBlackholes[i].Position, SimulationBlackholes[i].Mass);
        sumOfCameraGravitationalPotential += GravitationalPotential(float3(0.0f, 0.0f, 0.0f), SimulationBlackholes[i].Position, SimulationBlackholes[i].Mass);
        
        photon.BlueshiftFactor = max(LorentzFactor(GravitationalEscapeVelocity(photon.Position, SimulationBlackholes[i].Position, SimulationBlackholes[i].Mass)), photon.BlueshiftFactor);
    }
           
    photon.RedshiftFactor = max((sumOfCameraGravitationalPotential - sumOfGravitationalPotential) / (PHYSICS_C * PHYSICS_C), photon.RedshiftFactor);
}


bool PhotonCheckBlackholeCollisions(Photon photon)
{
    [unroll]
    for (int i = 0; i < SIMULATION_COUNT_BLACKHOLES; i++)
    {
        if (BlackholeCheckCollision(SimulationBlackholes[i], photon))
            return true;
    }

    return false;
}


bool PhotonCheckCelestialObjectCollision(inout Photon photon)
{
    if (CelestialObjectCheckCollision(photon))
    {
        photon.Color = CelestialObjectGetIntersectionColor(photon);
            
        return true;
    }
    
    return false;
}


// -- Camera
float4 GetSkyboxTexturePixelColor(float3 directionVector)
{
    if (IsPlaneIntersectionAhead(float3(0.0f, 0.0f, 0.0f), directionVector, float3(0.0f, 0.0f, -1.0f), float3(0.0f, 0.0f, 1.0f)))
    {
        float texturePixelWidth, texturePixelHeight;
        
        SkyboxTexture.GetDimensions(texturePixelWidth, texturePixelHeight);
        
        float2 textureViewportSize = 2.0f * float2(texturePixelWidth / SimulationCamera[0].ScreenSize.x, texturePixelHeight / SimulationCamera[0].ScreenSize.x);
        float3 textureIntersectionPoint = GetPlaneIntersectionPoint(float3(0.0f, 0.0f, 0.0f), directionVector, float3(0.0f, 0.0f, -1.0f), float3(0.0f, 0.0f, 1.0f));
        int2 skyboxScreenCoordinates = int2(
            (int)((textureIntersectionPoint.x + textureViewportSize.x * 0.5f) / textureViewportSize.x * texturePixelWidth),
            (int)((textureIntersectionPoint.y + textureViewportSize.y * 0.5f) / textureViewportSize.y * texturePixelHeight)
        );
    
        if (skyboxScreenCoordinates.x >= 0 && skyboxScreenCoordinates.x < texturePixelWidth && skyboxScreenCoordinates.y >= 0 && skyboxScreenCoordinates.y < texturePixelHeight)
            return SkyboxTexture[uint2((uint)skyboxScreenCoordinates.x, (uint)skyboxScreenCoordinates.y)];
    }
    
    return float4(0.0f, 0.0f, 0.0f, 1.0f);
}


float3 CameraGetRayDirection(uint2 pixelPosition)
{
    float cameraNDCx = (2.0f * ((pixelPosition.x + 0.5f) / SimulationCamera[0].ScreenSize.x) - 1.0f) * SimulationCamera[0].ViewportSize.x * 0.5f;
    float cameraNDCy = (2.0f * ((pixelPosition.y + 0.5f) / SimulationCamera[0].ScreenSize.y) - 1.0f) * SimulationCamera[0].ViewportSize.y * 0.5f;
    
    return normalize(float3(cameraNDCx, cameraNDCy, -1.0f));
}


float4 CameraGetSimulatedPixelColor(uint2 pixelPosition)
{
    Photon photon = CreatePhoton(float3(0.0f, 0.0f, 0.0f), CameraGetRayDirection(pixelPosition) * PHYSICS_C);
    
    for (int i = 1; i <= SIMULATION_MAXPHOTONSTEPS; i++)
    {
        photon.Velocity += PhotonCalculateAcceleration(photon) * SIMULATION_DELTATIME;
        
        // Update: Collisions (intersections)
        if (PhotonCheckBlackholeCollisions(photon)) break; // Blackhole intersect: Assume the light gets trapped in an orbit or spirals down to the center
        if (PhotonCheckCelestialObjectCollision(photon)) break;  // Celestial object intersect: Collide and get texture intersection color
        
        photon.Position += photon.Velocity * SIMULATION_DELTATIME;
        
        PhotonUpdateShift(photon);
        
        // Update: Max iterations (check skybox texture intersection)
        if (i == SIMULATION_MAXPHOTONSTEPS) photon.Color = GetSkyboxTexturePixelColor(photon.Velocity);
    }
    
    float3 hsv = RGBA2HSV(photon.Color);
    float wavelength = Hue2Wavelength(hsv.x) * (1.0f + photon.RedshiftFactor) / photon.BlueshiftFactor;
    float4 wavelengthRGBA = Wavelength2RGBA(wavelength, photon.Color);
    
    return wavelengthRGBA;
}


[numthreads(1024, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    uint2 pixelPosition = uint2(id.x % SIMULATION_WIDTH, id.x / SIMULATION_WIDTH);
    
    TargetTexture[pixelPosition] = CameraGetSimulatedPixelColor(pixelPosition);
}
